package mountain;

import fractal.*;

public class Mountain extends Fractal {
	private Point startPoint1;
	private Point startPoint2;
	private Point startPoint3;
	
	public Mountain(Point point1, Point point2, Point point3) {
		super();
		this.startPoint1 = point1;
		this.startPoint2 = point2;
		this.startPoint3 = point3;
	}
	
	public String getTitle() {
		return "Mountain Fractal";
	}

	public void draw(TurtleGraphics turtle) {
		turtle.moveTo(startPoint1.getX(), startPoint1.getY());
		
		drawTriangle(turtle, order, startPoint1, startPoint2, startPoint3);
		drawTriangleWithDev(turtle, order, 20, startPoint1, startPoint2, startPoint3);
	}
	
	private Point averagePoint(Point[] points) {
		int x = 0;
		int y = 0;
		
		for(Point p : points) {
			x += p.getX();
			y += p.getY();
		}
		
		if(points.length > 0) {
			x /= points.length;
			y /= points.length;
		}
		
		return new Point(x, y);
	}
	
	private Point center(Point pointA, Point pointB) {
		Point[] points = {pointA, pointB};
		
		return averagePoint(points);
	}
	
	private void drawTriangleWithDev(TurtleGraphics turtle, int order, double dev, Point point1, Point point2, Point point3) {
		if(order == 0) {
			turtle.moveTo(point1.getX(), point1.getY());
			turtle.penDown();
			
			turtle.forwardTo(point2.getX(), point2.getY());
			turtle.forwardTo(point3.getX(), point3.getY());
			turtle.forwardTo(point1.getX(), point1.getY());
			
			turtle.penUp();
		} else {
			Point[] points = {point1, point2, point3};
			Point middle = averagePoint(points);
			
			int random1 = (int) RandomUtilities.randFunc(dev);
			Point offset1 = new Point(middle.getX() + random1, middle.getY() + random1);
			
			int random2 = (int) RandomUtilities.randFunc(dev);
			Point offset2 = new Point(middle.getX() + random2, middle.getY() + random2);
			
			int random3 = (int) RandomUtilities.randFunc(dev);
			Point offset3 = new Point(middle.getX() + random3, middle.getY() + random3);
			
			double newDev = dev/2;
			
			drawTriangleWithDev(turtle, order, newDev, point1, offset1, offset3);
			drawTriangleWithDev(turtle, order, newDev, offset1, point2, offset2);
			drawTriangleWithDev(turtle, order, newDev, offset3, offset2, point3);
			
			drawTriangleWithDev(turtle, order, newDev, offset1, offset2, offset3);
		}
	}
	
	private void drawTriangle(TurtleGraphics turtle, int order, Point point1, Point point2, Point point3) {
		if(order == 0) {
			turtle.moveTo(point1.getX(), point1.getY());
			turtle.penDown();
			
			turtle.forwardTo(point2.getX(), point2.getY());
			turtle.forwardTo(point3.getX(), point3.getY());
			turtle.forwardTo(point1.getX(), point1.getY());
			
			turtle.penUp();
		} else {
			Point point12 = center(point1, point2);
			Point point23 = center(point2, point3);
			Point point31 = center(point3, point1);
			
			drawTriangle(turtle, order - 1, point1, point12, point31);
			drawTriangle(turtle, order - 1, point12, point2, point23);
			drawTriangle(turtle, order - 1, point31, point23, point3);
			
			drawTriangle(turtle, order - 1, point12, point23, point31);
		}
	}
}
